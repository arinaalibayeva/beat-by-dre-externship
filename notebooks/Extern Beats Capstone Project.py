# -*- coding: utf-8 -*-
"""Extern_Beats_Capstone_Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13dVQUECDJjwEVDgoz8J4UmTA6d_FDEP5

# Capstone Project: Consumer Insights Data Analytics Externship of Beats by Dre

## 1. Title Page
**Project Title:** Consumer Insights Data Analytics Externship of Beats by Dre  
**Student Name:** Arina Alibayeva
**Date:** 09.01.2024

## 2. Table of Contents
1. Introduction
2. Data Description
3. Exploratory Data Analysis (EDA)
4. Sentiment Analysis
5. AI-Generated Insights
6. Comparative Analysis
7. Strategic Recommendations
8. Conclusion
9. References

## 3. Introduction

### 3.1 Project Overview

The main purpose of the project is to develop Data Analysis Proficiency by analyzing consumer data at Beats by Dre.

Key Objectives:


*   Learn methods for gathering and cleaning large datasets, ensuring data quality - I learned how to gather reviews on Amazon, using API to creatre a large dataset that is consistent for subsequent analysis.

*   Learn exploratory data analysis techniques to find patterns and trends in data.
*   Develop skills in sentiment analysis to interpret consumer feedback, gaining insights into customer preferences.


*   Incorporate AI tools for more advanced data analysis to formulate meaningful strategic recommendations.

### 3.2 Background

Beats by Dre is an audio brand known for its high-quality audio products, including headphones, earphones, and speakers.

Consumer sentiment analysis helps companies understand how customers perceive their products and identify areas for improvement. It allows brands to manage their reputation by identifying positive and negative sentiments, enhancing brand image.

Therefore, by understadning customer's preferences, Beats can tailor their marketing strategies to resonate with different customer segments.

## 4. Data Description

### 4.1 Data Sources

The primary data source consists of consumer reviews collected from Amazon.

### 4.2 Data Collection

1. Identify a popular Beats product - Wireless Earbuds
2. Identify competitor products - Sony, Apple, JBL, Samsung, Bose, Anker, Raycon, Status
3. Extract the review data through Oxylabs API for each product
4. Combining data of each individual CSV file ( Individual CSV files for each product were loaded into separate data frames. These data frames were then concatenated into a single, merged data frame containing all the reviews).

The only challenge that I faced was the number of reviews. The required number of products for the program was five, including Beats by Dre product. The maximum number of extracted reviews through API for one product was 100. It did not add up to 1000 reveiws so I used 10 products, having 100 reviews for each.

### 4.3 Data Cleaning
"""

import pandas as pd
import numpy as np
df = pd.read_csv('my_project.csv')

df.head()

"""To clean the dataset by:


*   Handling missing values
*   Identifying and handling outliers

*   Converting categorical columns to numerical variables if necessary



"""

# Detect missing values
print(df.isnull().sum())

df['author'].fillna('Unknown', inplace=True)

df.groupby('product_id')['product_attributes'].count()

df_1 = df.query("product_id == 'B0D1XD1ZV3'")['product_attributes'].to_frame()
df_1['product_attributes'].fillna('N/A', inplace = True)
df.update(df_1)

df.query("product_id == 'B09CGM1BWH'")['product_attributes'].value_counts()
df_2 = df.query("product_id == 'B09CGM1BWH'")['product_attributes'].to_frame()
df_2['product_attributes'].fillna('Midnight Black', inplace = True)
df.update(df_2)

df.query("product_id == 'B0CLFXPYPC'")['product_attributes'].value_counts()
df_3 = df.query("product_id == 'B0CLFXPYPC'")['product_attributes'].to_frame()
df_3['product_attributes'].fillna('Onyx (Black)', inplace = True)
df.update(df_3)

df.query("product_id == 'B0CTD56NJ2'")['product_attributes'].value_counts()
df_3 = df.query("product_id == 'B0CTD56NJ2'")['product_attributes'].to_frame()
df_3['product_attributes'].fillna('Carbon Black', inplace = True)
df.update(df_3)

# Checking the updated dataframe
df.groupby('product_id')['product_attributes'].count()

"""Significant decisions made during the process (handling missing values):

1. Detect all the missing values in the dataset - columns "author" and "product_attributes" have missing values
2. To handle the missing value in the column '**author**', I assigned the value "Unknown" because it is an ordinal value with a missing value that represents a name of the author.
3. For the 'product_attributes' missing values I grouped the values by product_id - 4/10 products have missing values.
4. Since, there are not that many products with missing values, I went through all of them individually. For Apple product, I identified that the product attribute is not applicable. For others, I assigned the most popular value for that variable.


"""

def find_outliers(group):
    if (group['rating'] == 5).all():
        Q1 = group['helpful_count'].quantile(0.25)
        Q3 = group['helpful_count'].quantile(0.75)
        IQR = Q3 - Q1
        upper_bound = Q3 + 3 * IQR
        outliers = group[group['helpful_count'] > upper_bound]
        outliers['orig_index'] = outliers.index + 1
        return outliers
    else:
        return pd.DataFrame()

outliers = df.groupby(['product_id', 'rating']).apply(find_outliers).reset_index(drop=True)

outliers.set_index('orig_index')
df = df.drop (index=outliers['orig_index'].tolist())
df

"""Significant decisions made during the process (identifying and handling outliers):
1. To find the outliers, I will focus on a specific case of when a review has a rating of 5 exceptionally high "helpful count" values. This could be due to review manipulation practices where certain reviews receive artificial votes to appear more influential.
2. I deleted the outliers from the dataset

"""

df['color'] = df['product_attributes'].str.extract(r'Color: (\w+)', expand=False)
df['product_attributes'] = df['product_attributes'].str.replace(r'Color: \w+,?\s*', '', regex=True)
df

"""Significant decisions made during the process (convering categorical into numerical):

My idea when converting categorical columns into numerical was to extract the category of color from the product_attributes variable. However, since the data is inconsistent, some values are spelt wrong (there are no spaces between the color and the word "Style", for instance). Therefore, I think it is not that necessary to convert it into numerical form.

## 5. Exploratory Data Analysis (EDA)

### 5.1 Data Overview
"""

import seaborn as sns
import matplotlib.pyplot as plt

mean_value = df['helpful_count'].mean()
median_value = df['helpful_count'].median()
mode_value = df['helpful_count'].mode()[0]
variance_value = df['helpful_count'].var()
std_deviation = df['helpful_count'].std()

print("Standard Deviation:", std_deviation)
print("Variance:", variance_value)
print("Mode:", mode_value)
print("Median:", median_value)
print("Mean:", mean_value)

"""### 5.2 Visualizations

Correlation is only defined for continuous variables and we have only one continuous varible. However, I will still try to find correlation, using different visualizations to prove that there is no result.

First, I focus on the heatmap that represents the correlation between 'rating' and 'helpful_count'. Cells closer to red indicate higher positive correlations. Cells closer to blue indicate higher negative correlations.

In this case, the correlation between rating and helpful_count is very close to zero (-0.022), suggesting there is no significant linear relationship between these two variables - weak correlation.

In simple terms, knowing the rating of a product doesn't give much information about how helpful it will be rated, and vice versa.
"""

correlation_matrix = df[['helpful_count', 'rating']].corr()
print(correlation_matrix)

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Heatmap of Rating and Helpful Count')
plt.show()

"""To further identify any potential relationships, we will consider other visualizations.

Scatter plot with a trend line is helpful as the trend line represents the relatinoship between two variables based on the slope (positive, negative, no slope).

In this case, the slope = 0 (is flat) which reinforces the finding from the correlation coefficient that there is no significant linear relationship between these two variables.
"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x='rating', y='helpful_count', data=df)
sns.regplot(x='rating', y='helpful_count', data=df, scatter=False, color='red')
plt.title('Scatter Plot of Rating vs Helpful Count with Trend Line')
plt.xlabel('Rating')
plt.ylabel('Helpful Count')
plt.show()

"""However, there are still some other conclusions we can make.

We can look at a heatmap with a grounded data. It can help you understand how the helpfulness of reviews varies with different ratings. It visualizes the mean helpful_count for each rating.

In this case, Rating 1 has the highest average helpful_count (75), suggesting that reviews with a rating of 1 are generally found more helpful. For instance, Rating 5 has a lower average comparing to Rating 1 which means that the reviews with rating 5 are found less helpful.
"""

pivot_table = df.pivot_table(index='rating', values='helpful_count', aggfunc='mean')

plt.figure(figsize=(10, 6))
sns.heatmap(pivot_table, annot=True, cmap='coolwarm')
plt.title('Heatmap of Average Helpful Count by Rating')
plt.xlabel('Rating')
plt.ylabel('Helpful Count')
plt.show()

"""We can also take a look at the histograms.

Below, I have a histogram for the variable 'helpful_count' for a specific product. I only visualize the rating for one product with a histogram to make it more insightful.

For instance, the histogram below is specifically for th 'Beats' product showing the frequency of each rating with 'Rating 5' having the highest frequency - the biggest number of people gave the product rating 5 out of 5.
"""

product_id = 'B0C2W1KLSS'
ratings_for_product = df[df['product_id'] == product_id]['rating']

plt.figure(figsize=(10, 6))
sns.histplot(ratings_for_product, bins=5, kde=False, color='green')

plt.title(f'Histogram of Ratings for Product ID: {product_id}')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.xticks(range(1, 6))  # Assuming ratings are from 1 to 5
plt.grid(True)
plt.show()

"""### 5.3 Descriptive Statistics

Based on the findings from EDA:

1. There is no correlation between 'rating' and 'helpful_count' meaning that knowing the rating of a product doesn't give much information about how helpful it will be rated, and vice versa.
2. People found reviews with rating 1/5 more helpful than reviews with rating 5 which might suggest that the content of the reviews with lower rating is more relatable than those with a higher rating.
3. Histograms of the 'rating' variable for a specific product might be helpful to see the frequency of the ratings for each individual products - did more people give the rating of 1 out 5 or 5 out of 5?, etc.

## 6. Sentiment Analysis

### 6.1 Methodology

I used TextBlob sentiment analysis technique. TextBlob assigns a polarity score to the text, which ranges from -1 to 1 (negative - positive sentiment). TextBlob also provides a subjectivity score, ranging from 0 to 1. This score reflects the degree of personal opinion or emotion expressed in the text
"""

from textblob import TextBlob

def analyze_sentiment_textblob(text):
    blob = TextBlob(text)
    sentiment = blob.sentiment
    return sentiment.polarity, sentiment.subjectivity

df['sentiment_textblob'] = df['content'].apply(analyze_sentiment_textblob)
df['polarity'] = df['sentiment_textblob'].apply(lambda x: x[0])
df['subjectivity'] = df['sentiment_textblob'].apply(lambda x: x[1])

# Display the updated DataFrame
print(df[['content', 'polarity', 'subjectivity']])

def classify_sentiment(polarity):
    if polarity > 0:
        return 'Positive'
    elif polarity < 0:
        return 'Negative'
    else:
        return 'Neutral'

df['sentiment'] = df['polarity'].apply(classify_sentiment)
print(df[['content', 'polarity', 'sentiment']])

"""### 6.2 Results

"""

# Calculating sentiment counts and proportions
sentiment_counts = df['sentiment'].value_counts()
sentiment_proportions = df['sentiment'].value_counts(normalize=True)

print("Sentiment Counts:")
print(sentiment_counts)
print("\nSentiment Proportions:")
print(sentiment_proportions)

# Visualize so it is easier to interpret
plt.figure(figsize=(8, 6))
sentiment_counts.plot(kind='bar', color=['green', 'red', 'blue'])
plt.title('Sentiment Distribution')
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()

def analyze_sentiment(text):
    blob = TextBlob(text)
    polarity = blob.sentiment.polarity

    if polarity > 0:
        return 'Positive'
    elif polarity < 0:
        return 'Negative'
    else:
        return 'Neutral'

# Filter reviews for a specific product_id ('Beats' product)
product_id = 'B0C2W1KLSS'
filtered_df = df[df['product_id'] == product_id].copy()
filtered_df['sentiment'] = filtered_df['content'].apply(analyze_sentiment)

sentiment_counts = filtered_df['sentiment'].value_counts()
sentiment_proportions = filtered_df['sentiment'].value_counts(normalize=True)

print("Sentiment Counts:")
print(sentiment_counts)
print("\nSentiment Proportions:")
print(sentiment_proportions)

"""**Based on the findings for the sentiment analysis:**

The majority of reviews (92.6%) are classified as 'Positive', indicating that most consumer feedback is favorable towards the product or service.
A smaller proportion of reviews are categorized as 'Neutral' (5.0%) or 'Negative' (2.4%), suggesting that fewer consumers expressed neutral or negative opinions about the product or service.
However, the sentiment analysis was conducted on the whole dataset analyzing the content of 1000 reviews without grouping them by the ID.

Below, I also provided the sentiment analysis of the Beats product as an example to confirm that analyzing the products separetly might be more insighful as we can see how many positive, negative, and neutral reviews this specific product received without generalizing with other products.

**Insights for Beats:**
Histograms visualizing rating of a certain product and sentiment analysis of the reviews for one specific product are very beneficial when analyzing consumers feedback as it shows the statistics of consumer evaluation of the product. Performing these with a whole dataset might be good for general statistics and data tracking but won't be very helpful if you aim at analyzing consumers feedback in greater detail.

## 7. AI-Generated Insights

### 7.1 Using Gemini AI

In this project, Gemini AI employs NLP (Natural Language Processing) algorithms to analyze the textual content of customer reviews.
"""

import google.generativeai as genai

# Load your dataset
df = pd.read_csv('my_project.csv')

# Replace 'your_api_key' with the actual API key
api_key = "AIzaSyBqrAbDoo77-a1k8LvHO9lzmItG1Ht0e8w"

# Function to analyze reviews using Gemini AI
def analyze_reviews(reviews, api_key,prompt_message):
    genai.configure(api_key=api_key)

    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        generation_config={
            "temperature": 1,
            "top_p": 0.95,
            "top_k": 64,
            "max_output_tokens": 8192,
            "response_mime_type": "text/plain",
        },
    )

    chat_session = model.start_chat(history=[])

    prompt = prompt_message + "\n\n".join(reviews)
    response = chat_session.send_message(prompt)
    return response.text

"""### 7.2 Key Insights


"""

# Select a subset of reviews

reviews_column_name = 'content'
reviews = df[reviews_column_name].head(100).tolist()

# Send prompts
prompt_message = "Extract and compare the most frequently mentioned themes and topics in the reviews for Beats by Dre wireless headphones versus the other products. How many times does Beats product get compared with other brands? "
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)

"""First, I analyzed the most frequently mentioned features and topics in the reviews in the comparison with other projects. Beats by Dre wireless headphones and mostly getting compared to Apple AirPods Pro so the comparison includes these to products. Gemini points out the themes for both products separately fisrt and then draws conclusions.

The main insight about Beats by Dre product from the reviews based on this prompt is that Beats is chosen for good sound quality and noise cancellation but they still face issues with charging and customizable EQ. While some people express mostly positive feedback, others do find AirPods Pro better in areas of sound quality noise calcellation.
"""

prompt_message = "Perform an emotion analysis on the reviews for Beats by Dre wireless headphones to identify prevalent emotions expressed. Compare these emotional insights with those from reviews of other wireless earbuds. "
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)

"""Second, I focused on the emotions being expressed in the reviews to analyze how well Google Gemini can depict that. Overall, both Beats Studio Buds+ and AirPods Pro offer a positive user experience but people empasize different aspects for both products so emotional tone differs based on the feature discussed."""

prompt_message = "Investigate if there is any correlation between the price of Beats by Dre wireless headphones and customer satisfaction."
insights = analyze_reviews(reviews, api_key, prompt_message)
print(insights)

"""Third, I decided to focus on price of the earbuds since it was not mentioned as one of the features in the first prompt analysis. Some people do find Beats overpriced, but comparing to AirPod Pro, Beats by Dre appears to be a more affordable alternative.

### 7.3 Interpretation

# Comparison of Sound Quality and Noise Cancellation
1. The analysis indicates that Beats by Dre headphones are appreciated for their sound quality and noise cancellation capabilities. However, there are mixed opinions, with some users finding AirPods Pro superior in these areas. Therefore, Beats should focus on sound quality and noise cancellation, identifying specific areas that might require enhancement to compete more effectively in the market.

# Charging Issues and Customizable EQ
2.  The mention of issues related to charging and customizable EQ settings indicates areas where users feel Beats could improve. These improvements can also be emphasized in marketing campaigns to differentiate Beats products from competitors like AirPods Pro.

# Emotional Tone and User Experience
3. The emotioanl connection to each product varies but it generally offers a positive user experience. Therefore, if users feel strongly about the product's functionality, highlighting improvements in future releases could appeal to current and prospective users.

## 8. Comparative Analysis

### 8.1 Competitor Overview

Sony - superior noise calcellation, sound quality, and advanced features

Apple - sleek design, ease of use, integration with Apple devices

Samsung - suitable both for casual users and tech enthusiasts

Bose - suitable for users who prioritize high-fidelity sound and advanced noise reduction

Anker - delivering good sound quality and battery life at competitive prices

Status - strong emphasis on design and premioum materials

JBL - ruggedness and outdoor-friendly features

Raycon - a decent audio experience with a fashion-forward approach
"""

data = {
    'product_id': [
        'B0C2W1KLSS', 'B0D1XD1ZV3', 'B09YL76VSR', 'B09JB8KPNW', 'B0B2SH4CN6',
        'B0B4PSQHD5', 'B0CD2FSRDD', 'B09CGM1BWH', 'B0CTD56NJ2', 'B0CLFXPYPC'
    ],
    'company': [
        'Beats by Dre', 'Apple', 'Sony', 'JBL', 'Samsung',
        'Bose', 'Anker', 'Raycon', 'Status', 'Bose2'
    ]
}

# Create a DataFrame from the data
product_df = pd.DataFrame(data)

# Print the DataFrame to show product IDs and corresponding company names
print("Product ID to Company Name Mapping:")
print(product_df)

# Alternatively, if you want to see it in a more readable format
for index, row in product_df.iterrows():
    print(f"Product ID: {row['product_id']}, Company: {row['company']}")

"""### 8.2 Comparison of Sentiments

"""

def analyze_sentiment(text):
    blob = TextBlob(text)
    if blob.sentiment.polarity > 0:
        return 'Positive'
    elif blob.sentiment.polarity < 0:
        return 'Negative'
    else:
        return 'Neutral'

product_ids = df['product_id'].unique()

sentiment_counts_all = {}
sentiment_proportions_all = {}

for product_id in product_ids:

    filtered_df = df[df['product_id'] == product_id].copy()
    filtered_df['sentiment'] = filtered_df['content'].apply(analyze_sentiment)
    sentiment_counts = filtered_df['sentiment'].value_counts()
    sentiment_counts_all[product_id] = sentiment_counts
    sentiment_proportions = sentiment_counts / sentiment_counts.sum()
    sentiment_proportions_all[product_id] = sentiment_proportions

sentiment_counts_df = pd.DataFrame(sentiment_counts_all).fillna(0)
sentiment_proportions_df = pd.DataFrame(sentiment_proportions_all).fillna(0)

print("Sentiment Counts for All Products:")
print(sentiment_counts_df)
print("\nSentiment Proportions for All Products:")
print(sentiment_proportions_df)

sentiment_counts_df = pd.DataFrame(sentiment_counts_all).T.fillna(0)

# Mapping of product IDs to company names
data = {
    'product_id': [
        'B0C2W1KLSS', 'B0D1XD1ZV3', 'B09YL76VSR', 'B09JB8KPNW', 'B0B2SH4CN6',
        'B0B4PSQHD5', 'B0CD2FSRDD', 'B09CGM1BWH', 'B0CTD56NJ2', 'B0CLFXPYPC'
    ],
    'company': [
        'Beats by Dre', 'Apple', 'Sony', 'JBL', 'Samsung',
        'Bose', 'Anker', 'Raycon', 'Status', 'Bose2'
    ]
}

product_df = pd.DataFrame(data)

sentiment_counts_df = sentiment_counts_df.reset_index().rename(columns={'index': 'product_id'})
sentiment_counts_df = pd.merge(sentiment_counts_df, product_df, on='product_id', how='left')
sentiment_counts_df = sentiment_counts_df.set_index('company')
plt.figure(figsize=(14, 8))
sentiment_counts_df.plot(kind='bar', stacked=True, colormap='viridis', figsize=(14, 8))

plt.title('Sentiment Counts for All Companies')
plt.xlabel('Company')
plt.ylabel('Number of Reviews')
plt.legend(title='Sentiment')
plt.xticks(rotation=45)
plt.tight_layout()

plt.show()

"""**Summary of the findings**



*  Beats by Dre and JBL both have a solid positive sentiment rate (87%), similar to each other. Hiwever, Bose and raycon lead with the highest proportion of positive sentiment (97%).
*   Beats by Dre and Apple have a higher proportion of neutral sentiment compared to the top performers, suggesting a mix of satisfaction and dissatisfaction.
*   Apple has the highest proportion of negative sentiment (6%), which may suggest more dissatisfaction among its users compared to other brands.

Beats by Dre has a relatively high positive sentiment (87%) and a low negative sentiment (2%), placing it in the upper-middle range of sentiment positivity among competitors.
Bose and Raycon are the top performers with nearly all positive feedback, while Apple faces more criticism compared to others.

### 8.3 SWOT Analysis

S: High positive sentiment rate 87% reflects strong customer satisfaction in sound quality and noise calcellation
W: hile Beats by Dre performs well, it is often compared to Apple’s AirPods Pro, which some reviews rate higher in sound quality and noise cancellation.
O: Addressing issues related to charging and EQ customization could reduce negative feedback, enhancing the technical features of the product.
T: Apple has a highly loyal customer base and a strong brand reputation.  This strong brand allegiance is a threat as it limits Beats by Dre's ability to capture the same segment of the market, even with comparable or superior features.

## 9. Strategic Recommendations

### 9.1 Product Improvements

1. Consider developing faster charging capabilities or offering longer battery life
2. Develop a more flexible EQ customization interface
3. Improved drivers, better acousticts and advanced sound processing technologies will allow Beats to compete directly with Airpods Pro

### 9.2 Marketing Strategies

*   Collaborate with influencers who can authentically demonstrate the improvements of Beats products.
*  Encourage atisfied customers to share their experiences on social media, starting a social media challenge or trend.

+ Offer accessories, extended warranties, or premium services at a discounted rate.

In conclusion, having social media influencers or famous experts come on Internet and demonstrate your products will increase product visibility. When consumers frequently encounter others using a particular product, it enhances their perception of the product’s desirability and reliability. Prioritize product's technical aspects over design, Beats will appeal to consumers who value performance, reliability, and innovation.

### 9.3 Future Research

- Analyze user demographics to tailor marketing strategies more effectively
- Collaboration with influential companies and organizations (For instance, Crumbl Cookies are getting a lot of attention arounf them recently and potential collaboration with them might attract new customers)

## 10. Conclusion

1. The majority of reviews for Beats by Dre and its competitors were positive
2. Beats by Dre had a slightly higher proportion of negative reviews compared to some competitors.
3. Pro: Beats was often compared with Apple’s AirPods Pro. Reviews indicated that Beats excels in sound quality and noise cancellation but faces challenges with charging and customizable EQ.
4. Emphasis on technical aspects like sound quality, battery life, and noise cancellation were highlighted as key drivers of positive sentiment. Many reviews prioritized these features over design aesthetics.

The project provided valuable insights into data analysis and detailed consumer sentiment for Beats by Dre and its competitors.

During my remote externship at Beats by Dre, I gained experience in using Python and advanced data science libraries to conduct comprehensive sentiment analysis on consumer reviews. This role allowed me to master exploratory data analysis (EDA) techniques, uncovering significant patterns and trends within large datasets. Utilizing sophisticated natural language processing tools like Gemini AI, I interpreted and summarized consumer feedback, offering valuable insights into product performance and customer satisfaction. Additionally, I developed proficiency in data visualization tools, which enabled me to effectively present these insights and contribute to strategic brand building.

## 11. References

Amazon.com. Spend less. Smile more. (2024). Amazon.com. https://www.amazon.com/ref=nav_logo

‌Beats by Dre. (2024). Beatsbydre.com. https://www.beatsbydre.com/

‌Oxylabs. (2017). Oxylabs.io. https://oxylabs.io/
‌
"""